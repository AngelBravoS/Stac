/***************************************************************************														*
 *   Copyright (C) 2018 by Ángel Bravo Sáenz  										*
 *   angelbravosaenz@gmail.com  															*
 *																									*
 *   This file is part of Stac.                                            *
 *                                                                         *
 *   Stac is free software; you can redistribute it and/or modify          *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   Stac is distributed in the hope that it will be useful,               *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with Stac; if not, write to the                                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
 
 /*void CalculosMuestreo::numElementosMuestra() {
	int n;
	std::cin >> n;
	setColumna(n);
}*/
 
				/*unsigned int j = 0;
				std::string line;
				while(getline(archivo, line)) {
					archivo >> matriz[0][j];
					matriz[1][j] = 1;
					//matriz[2][j] = 1 / prob;
				}*/

				/*			for(int i = 0; i < n; i++) {
				matriz[2][i] == 1/n;


std::fstream archivo;
if(agrupados == true) {
	archivo.open("matriz.dat", std::ios::in | std::ios::binary);
	if(archivo.is_open()) {
		std::cout << "Fichero leído" << '\n';
		//setFila(2);
		crearMatrizVacia();
		unsigned int n = getColumna();
		unsigned int i = 0, j = 0;
		while(!archivo.eof()) {
			archivo >> matriz[i][j];
			j++; //avanza en la fila
			i += j / n; //si pasó de N, le suma a 1 a i (siguiente columna)
			j = j % n; //se asegura que esté entre 0 y N-1
		}
		mostrarMatrizOriginal();
		std::cout << '\n';
		archivo.close();
	} else std::cout << "Fichero inexistente" << '\n';
} else {
	archivo.open("vector.dat", std::ios::in | std::ios::binary);
	if(archivo.is_open()) {
		std::cout << "Fichero leído" << '\n';
		crearVectorVacio();
		int n = getLongitudVector();
		for(int i = 0; i < n; i++) {
			archivo >> vector[i];
		}
		archivo.close();
	} else {
		std::cout << "Fichero inexistente" << '\n';
	}
}
} */


	/*numElementosVector();
	setColumna(getLongitudVector());

	switch(getTipoMuestreo()) {
	case '1' :
	case '2' :
	setFila(2);
	if(leeArchivo == true) {
		leerDatosArchivo();
		desagrupar();
	}	else if(agrupados == true) {
		crearMatrizVacia();
		editarMatrizVacia();
		desagrupar();
	}	else {
		crearVectorVacio();
		editarVectorVacio();
	}
	break;
	case '3' :
	case '4' :
	setFila(2);
	if(agrupados == true) {
		std::cout << "Tamaño de la muestra: ";
		numElementosVector();
		setColumna(getLongitudVector());
		crearMatrizVacia();
		editarMatrizVacia();
		desagrupar();
	} else {
		if(leeArchivo == true) {
			leerVectorArchivo();
			setColumna(getLongitudVector());
		} else {
			std::cout << "Tamaño de la muestra: ";
			numElementosVector();
			setColumna(getLongitudVector());
			crearVectorVacio();
			editarVectorVacio();
			//mostrarVector();
		}
	}
	//mostrarDatosMuestra();
	break;
	}*/

	/*CalculosMuestreo::CalculosMuestreo(char respuestaTipoMuestreo, bool respuestaAgrupados, bool respuestaArchivo, bool respuestaReemplazo, bool respuestaProbIguales, bool respuestaMismoTamanyo) {
	tipoMuestreo = respuestaTipoMuestreo;
	agrupados = respuestaAgrupados;
	leeArchivo = respuestaArchivo;
	reemplazo = respuestaReemplazo;
	probIguales = respuestaProbIguales;
	mismoTamanyo = respuestaMismoTamanyo;
}*/
